name: Build
on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev
    types: [opened, synchronize, reopened]
  release:
    types: [created]
jobs:
  test:
    name: ${{ matrix.os }} ${{ matrix.gcrypt }} ${{ format(matrix.compiler, '-cc') }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-latest", "ubuntu-18.04", "macOS-latest", "macos-11"]
        gcrypt: ["--disable-gcrypt", ""]
        compiler: ["default-cc"]
        # We test oldest (available) versus newest (available) compiler version on Ubuntu Latest
        include:
          - compiler: "g{0}-7"
            os: ubuntu-latest
          - compiler: "g{0}-10"
            os: ubuntu-latest
          - compiler:  "clang{0}-7"
            os: ubuntu-latest
          - compiler:  "clang{0}-12"
            os: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install Ubuntu Prerequisites
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install autoconf automake libtool pkg-config gettext libjson-c-dev flex bison libpcap-dev
          sudo apt-get install gcc-arm-linux-gnueabihf gcc-mingw-w64 libc6-dev
      - name: Install Ubuntu Prerequisites (libgcrypt)
        if: startsWith(matrix.os, 'ubuntu') && !startsWith(matrix.gcrypt, '--disable-gcrypt')
        run: |
          sudo apt-get install libgcrypt20-dev
      - name: Setup Ubuntu specified compiler (gcc)
        if: startsWith(matrix.os, 'ubuntu')  && startsWith(matrix.compiler, 'g')
        run: |
          sudo apt-get install ${{ format(matrix.compiler, 'cc') }}
          sudo apt-get install ${{ format(matrix.compiler, '++') }}
      - name: Setup Ubuntu specified compiler (clang)
        if: startsWith(matrix.os, 'ubuntu')  && startsWith(matrix.compiler, 'c')
        run: |
          sudo apt-get install ${{ format(matrix.compiler, '') }}
          sudo apt-get install ${{ format(matrix.compiler, '++') }}
      - name: Installing MacOS prerequisites
        if: startsWith(matrix.os, 'macOS')
        run: |
          brew install autoconf automake libtool pkg-config gettext json-c
      - name: Install MacOS Prerequisites (libgcrypt)
        if: startsWith(matrix.os, 'macOS') && !startsWith(matrix.gcrypt, '--disable-gcrypt')
        run: |
          brew install libgcrypt
      - name: Configure nDPI
        if: startsWith(matrix.compiler, 'default-cc')
        run: |
          env CFLAGS='-Werror' ./autogen.sh --enable-debug-messages ${{ matrix.gcrypt }}
      - name: Configure nDPI with specified GCC version on Ubuntu
        if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.compiler, 'g')
        run: |
          env CC=${{ format(matrix.compiler, 'cc') }} CXX=${{ format(matrix.compiler, '++') }} CFLAGS='-Werror' ./autogen.sh --enable-debug-messages ${{ matrix.gcrypt }}  
      - name: Configure nDPI with specified CLANG on Ubuntu
        if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.compiler, 'c')
        run: |
          env CC=${{ format(matrix.compiler, '') }} CXX=${{ format(matrix.compiler, '++') }} CFLAGS='-Werror' ./autogen.sh --enable-debug-messages ${{ matrix.gcrypt }} 
      - name: Build nDPI
        run: |
          make all
      - name: Test nDPI [DIFF]
        run: |
          ./tests/do.sh
      - name: Test nDPI [UNIT]
        run: |
          ./tests/do-unit.sh
      - name: Test nDPI [DGA]
        run: |
          ./tests/do-dga.sh
      - name: Configure nDPI [ARM] (runs only on ubuntu jobs)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          make distclean && env CFLAGS='-Werror' ./autogen.sh --host=arm-linux-gnueabihf --with-only-libndpi ${{ matrix.gcrypt }}
      - name: Build nDPI [ARM] (runs only on ubuntu jobs)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          make all
      - name: Configure nDPI [Mingw-w64] (runs only on ubuntu jobs)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          make distclean && ./autogen.sh --host=x86_64-w64-mingw32 ${{ matrix.gcrypt }}
      - name: Build nDPI [Mingw-w64] (runs only on ubuntu jobs)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          make all
